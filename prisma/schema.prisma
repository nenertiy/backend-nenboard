generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  username    String        @unique
  email       String        @unique
  password    String
  avatarId    String?
  avatar      Media?        @relation(fields: [avatarId], references: [id], onDelete: Cascade)
  createdBy   Task[]        @relation("TaskCreatedBy")
  assignedTo  Task[]        @relation("TaskAssignedTo")
  assignedBy  Task[]        @relation("TaskAssignedBy")
  archivedBy  Task[]        @relation("TaskArchivedBy")
  deletedBy   Task[]        @relation("TaskDeletedBy")
  projects    UserProject[]
  activityLog ActivityLog[]
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @default(now()) @updatedAt @map("updated_at")
}

model UserProject {
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role      UserRole         @default(INVITED)
  status    InvitationStatus @default(PENDING)
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @default(now()) @updatedAt @map("updated_at")

  @@unique([userId, projectId])
  @@index([userId, projectId])
  @@map("user_project")
}

enum UserRole {
  OWNER
  ADMIN
  MEMBER
  INVITED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Project {
  id             String        @id @default(uuid())
  name           String
  description    String?
  projectImageId String?       @map("project_image_id")
  projectImage   Media?        @relation(fields: [projectImageId], references: [id], onDelete: Cascade)
  users          UserProject[]
  tasks          Task[]
  activityLog    ActivityLog[]
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @default(now()) @updatedAt @map("updated_at")
}

model Task {
  id               String        @id @default(uuid())
  title            String
  description      String?
  status           TaskStatus    @default(TODO)
  priority         TaskPriority  @default(LOW)
  dueDate          DateTime?     @map("due_date")
  completedAt      DateTime?     @map("completed_at")
  isArchived       Boolean       @default(false)
  archivedAt       DateTime?     @map("archived_at")
  archivedByUserId String?       @map("archived_by_user_id")
  archivedBy       User?         @relation("TaskArchivedBy", fields: [archivedByUserId], references: [id], onDelete: SetNull)
  isDeleted        Boolean       @default(false)
  deletedAt        DateTime?     @map("deleted_at")
  deletedByUserId  String?       @map("deleted_by_user_id")
  deletedBy        User?         @relation("TaskDeletedBy", fields: [deletedByUserId], references: [id], onDelete: SetNull)
  projectId        String        @map("project_id")
  project          Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdByUserId  String        @map("created_by_user_id")
  createdBy        User          @relation("TaskCreatedBy", fields: [createdByUserId], references: [id], onDelete: Cascade)
  assignedToUserId String?       @map("assigned_to_user_id")
  assignedTo       User?         @relation("TaskAssignedTo", fields: [assignedToUserId], references: [id], onDelete: SetNull)
  assignedByUserId String?       @map("assigned_by_user_id")
  assignedBy       User?         @relation("TaskAssignedBy", fields: [assignedByUserId], references: [id], onDelete: SetNull)
  activityLog      ActivityLog[]
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @default(now()) @updatedAt @map("updated_at")

  @@index([projectId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model ActivityLog {
  id        String            @id @default(uuid())
  title     String
  details   String?
  action    ActivityLogAction
  userId    String            @map("user_id")
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String?           @map("project_id")
  project   Project?          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskId    String?           @map("task_id")
  task      Task?             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime          @default(now()) @map("created_at")
}

enum ActivityLogAction {
  CREATED
  UPDATED
  DELETED
  ARCHIVED
  UNARCHIVED
}

model Media {
  id        String    @id @default(uuid())
  url       String
  filename  String
  type      MediaType
  user      User[]
  project   Project[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
}

enum MediaType {
  AVATAR
  PROJECT
}
